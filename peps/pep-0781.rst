PEP: 781
Title: Adding Zstandard to the standard library
Author: Emma Harper Smith <emma@python.org>
Sponsor: Gregory P. Smith <greg@krypto.org>
Status: Draft
Type: Standards Track
Created: 2025-03-26
Python-Version: 3.14

Abstract
========

`Zstandard <https://facebook.github.io/zstd/>`_ is a widely adopted, mature,
and highly efficient compression standard. This PEP proposes adding a new
module to the Python standard library containing a Python wrapper around Meta's
``libzstd`` library, the default implementation. Additionally, to avoid name
collisions and present a unified interface, compression modules in the standard
library will be moved under a ``compression.*`` namespace.

Motivation
==========

CPython has modules for several different compression formats, such as `zlib
(DEFLATE) <https://docs.python.org/3/library/zlib.html>`_,
`bzip2 <https://docs.python.org/3/library/bz2.html>`_,
and `lzma <https://docs.python.org/3/library/lzma.html>`_, each widely used.
Including popular compression algorithms matches Python's "batteries included"
philosophy. The last compression algorithm added to the language was the
``lzma`` module, added in Python 3.3. Since that time, several new compression
formats have become very popular, including Zstandard.

Zstandard was released over a decade ago. In the intervening time, it has seen
`widespread adoption in many different areas of computing <https://facebook.github.io/zstd/#references>`_,
including databases, filesystems, archive formats (including ``tar``), package
formats (including conda packages), and other file formats (including several
Apache formats like Arrow).

There are multiple bindings to Zstandard for Python available on PyPI. One
goal with introducing an official module in the standard library is to reduce
confusion for Python users who want simple compression/decompression APIs.
These packages can continue providing extended APIs and bindings for other
Python implementations such as PyPy.

Additionally, a long standing `open issue <https://github.com/python/cpython/issues/81276>`_
requesting Zstandard support in the ``tarfile`` module requires Zstandard
support in the standard library. This issue has the 5th most "thumbs up" of
open issues on the CPython tracker, and has garnered a significant amount of
discussion.

Another use case of Zstandard compression could be to both reduce the size of
packages and increase installation speed for Python wheels. Anaconda found a
significant speedup when adopting Zstandard for the conda package format

.. epigraph::

    We see approximately a 2.5x overall speedup, almost all thanks to the dramatically faster extraction speed of the zstd compression used in the new file format.

    -- `Anaconda blog on Zstandard adoption <https://www.anaconda.com/blog/how-we-made-conda-faster-4-7>`_

`According to lzbench <https://github.com/inikep/lzbench?tab=readme-ov-file#benchmarks>`_,
a comprehensive benchmark of many different compression libraries and formats,
Zstandard has a significantly higher compression ratio compared to wheel's
existing zlib-based compression. While this PEP does *not* prescribe any
changes to the wheel format, having Zstandard bindings in the standard library
would enable a future PEP to improve Python wheel packages.

Rationale
=========

Implementation based on ``pyzstd``
----------------------------------

The implementation for this PEP is based on the `pyzstd project <https://github.com/Rogdham/pyzstd>`_.
This project was chosen as the code was `originally written to be upstreamed <https://github.com/python/cpython/issues/81276#issuecomment-1093824963>`_
to CPython by Ma Lin, who also wrote the `output buffer implementation used in
the standard library today <https://github.com/python/cpython/commit/f9bedb630e8a0b7d94e1c7e609b20dfaa2b22231>`_.
The project has since been taken over by Rogdham, but the APIs are similar to
the APIs for other compression modules such as ``bz2`` and ``lzma``.

Changes and removals to ``pyzstd``'s APIs
-----------------------------------------

n.b. maybe this should be an appendix?

To keep the initial implementation simple and make it easier to review, several
APIs were modified or removed completely. The "RichMem" API is removed as
CPython's output buffer does not use MREMAP. This could be integrated upstream
in a future change benefitting all compression libraries. The ``ZstdFile``
implementation was re-written in Python to match ``lzma`` and other modules,
and reduce the amount of C code in need of review.

The ``compress_stream`` / ``decompress_stream`` functions were removed, as they
were performance optimizations and can be replaced with using the ``open``
function from the Zstandard module.

The other major change is the ``level_or_options`` argument was split into two
independent arguments to keep the argument parsing clearer and improve clarity
of usage.

Finally, features requiring newer versions of Zstandard were removed, which
is mostly the support for the ``ZSTD_c_targetCBlockSize`` compression
parameter.

Minimum supported Zstandard version
-----------------------------------

The minimum supported Zstandard was chosen as v1.4.5, released in May of 2020.
This version was chosen as a minimum based on reviewing the versions of
Zstandard available in a number of Linux distribution package repositories,
including LTS releases.

Introduction of a ``compression`` namespace
-------------------------------------------

Both the ``zstd`` and ``zstandard`` import names are claimed by projects on
PyPI. To avoid breaking users of one of the existing bindings, this PEP
proposes introducing a new namespace for compression libraries,
``compression.*``. This name is already pre-claimed by PyPI for use in the
standard library, so no one may take the package on PyPI. The new Zstandard
module will be ``compression.zstd``. Other compression modules will be
re-exported to the ``compression`` namespace and their current names will be
deprecated. This is both to avoid user confusion about where to find
compression modules and to future-proof adding new compression modules.

Specification
=============

The ``compression`` namespace
-----------------------------

A new namespace package for compression modules will be introduced named
``compression``. The top-level module for this package will not contain code
to begin with, but a standard API for interacting with compression routines
may be added in the future.

The ``compression.zstd`` module
-------------------------------

A new module, ``compression.zstd`` will be introduced with Zstandard
compression APIs that match other compression modules in the standard library,
namely

* ``compress`` / ``decompress`` - APIs for one-shot compression/decompression
* ``ZstdFile`` / ``open`` - APIs for interacting with streams and file-like
  objects
* ``ZstdCompressor`` / ``ZstdDecompressor`` - APIs for incremental compression/
  decompression
* ``ZstdDict`` / ``train_dict`` / ``finalize_dict`` - APIs for interacting with
  Zstandard dictionaries, which are useful for compressing many small chunks of
  similar data

Other compression modules
-------------------------

Existing compression modules, namely ``lzma``, ``bz2``, and ``zlib``, will each
correspond to new sub-modules, ``compression.lzma``, ``compression.bz2``, and
``compression.zlib`` respectively. The ``compression`` sub-modules will be
alternate import names for the existing modules. The existing modules will emit
deprecation warnings (targeting Python 3.24 for removal) directing users to the
new ``compression`` namespace variants.

Backwards Compatibility
=======================

The main compatibility concern is usage of existing standard library
compression APIs. These will be deprecated, and may be removed in a future
version of Python (see open questions). This change should not be taken
lightly. However, given a long enough deprecation period, most users will
likely migrate to the new import names. Additionally, a libCST codemod could be
provided to automatically rewrite imports.

Security Implications
=====================

As with any new C code, especially code operating on potentially untrusted user
input, there are risks of memory safety issues. The authors plan on
contributing integration with libfuzzer to enable fuzzing the ``_zstd`` code
and ensure it is robust. Furthermore, there are a number of tests that exercise
the compression and decompression routines.

Taking on a new dependency also always has security risks, but the ``libzstd``
library participates in Meta's bug bounty program. Furthermore, the project
is widely used and fuzzed on each commit.

How to Teach This
=================

Documentation for the new module is in the reference implementation branch. If
existing compression modules are going to be moved to a ``compression``
namespace, then the documentation for those modules will be updated as well.

Reference Implementation
========================

The `reference implementation <https://github.com/emmatyping/cpython/tree/zstd>`_
contains the ``_zstd`` C code, the ``compression.zstd`` code, modifications to
tarfile, shutil, and zipfile, and tests for each new API and integration added.
It also contains the re-exports of other compression modules. Deprecations for
the existing import names will be added once a decision is reached regarding
the open issues.

Rejected Ideas
==============

Name the module ``libzstd`` and do not make a new ``compression`` namespace
---------------------------------------------------------------------------

One option instead of making a new ``compression`` namespace would be to find
a different name, such as ``libzstd``, as the import name. However, the issue
of existing import names is likely to persist for future compression formats
added to the standard library. LZ4, a common high speed compression format,
has `a package on PyPI <https://pypi.org/project/lz4/>`_ ``lz4`` with the
import name ``lz4``. Instead of solving this issue for each compression format,
it is better to solve it once and for all by using the already-claimed
``compression`` namespace.

Open Issues
===========

Should we remove old compression imports?
-----------------------------------------

It would be confusing to indefinitely have ``lzma`` and ``compression.lzma``
simultaneously. Ideally, ``import lzma`` should emit a deprecation for a future
Python version (maybe 3.24?). But should that deprecation exist indefinitely?
Should the old import names (e.g. ``import lzma``) eventually be removed? If
so, at which version?

Could we keep the existing compression module imports as-is?
------------------------------------------------------------

The minimally disruptive change would be to add ``compression.zstd``, but not
deprecate and remove ``lzma``, ``bz2``, and ``zlib``, and not create
``compression.lzma`` etc. This has the potential to cause significant
confusion for users however.

Copyright
=========

This document is placed in the public domain or under the
CC0-1.0-Universal license, whichever is more permissive.
